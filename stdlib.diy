;; Some logical operators.

(define not
    (lambda (b)
        (if b #f #t)))

(define or
    (lambda (a b)
        (if (eq #t a)
            #t
            (if (eq #t b)
                #t
                #f))))

(define and
    (lambda (a b)
        (if (eq #t a)
            (if (eq #t b)
                #t
                #f)
            #f)))

(define xor
    (lambda (a b)
        (if (eq #t a)
            (if (eq #f b)
                #t
                #f)
            (if (eq #t b)
                #t
                #f))))

(define <=
    (lambda (a b)
        (or
            (eq a b)
            (< a b))))

(define >=
    (lambda (a b)
        (or
            (eq a b)
            (> a b))))

(define sum
    (lambda (xs)
        (if (empty xs)
            0
            (+ (head xs) (sum (tail xs))))))

(define length
    (lambda (xs)
        (if (empty xs)
            0
            (+ 1 (length (tail xs))))))


;; DIY -- Implement the rest of your standard library
;; here as part 7 of the workshop.
